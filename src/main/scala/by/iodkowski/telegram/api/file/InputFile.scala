package by.iodkowski.telegram.api.file

import org.drinkless.tdlib.TdApi

/**
  * Points to a file.
  */
sealed abstract class InputFile extends Product with Serializable

/**
  * A file defined by its unique ID.
  *
  * @param id Unique file identifier.
  */
final case class InputFileId(id: Int) extends InputFile

private[api] object InputFileId {
  def fromJava(o: TdApi.InputFileId): InputFileId = InputFileId(o.id)
}

/**
  * A file defined by its remote ID. The remote ID is guaranteed to be usable only if the corresponding file is still accessible to the user and known to TDLib. For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the client.
  *
  * @param id Remote file identifier.
  */
final case class InputFileRemote(id: String) extends InputFile

private[api] object InputFileRemote {
  def fromJava(o: TdApi.InputFileRemote): InputFileRemote = InputFileRemote(o.id)
}

/**
  * A file defined by a local path.
  *
  * @param path Local path to the file.
  */
final case class InputFileLocal(path: String) extends InputFile

private[api] object InputFileLocal {
  def fromJava(o: TdApi.InputFileLocal): InputFileLocal = InputFileLocal(o.path)
}

/**
  * A file generated by the client.
  *
  * @param originalPath Local path to a file from which the file is generated; may be empty if there is no such file.
  * @param conversion   String specifying the conversion applied to the original file; should be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage.
  * @param expectedSize Expected size of the generated file; 0 if unknown.
  */
final case class InputFileGenerated(originalPath: String, conversion: String, expectedSize: Int) extends InputFile

private[api] object InputFileGenerated {
  def fromJava(o: TdApi.InputFileGenerated): InputFileGenerated =
    InputFileGenerated(o.originalPath, o.conversion, o.expectedSize)
}

private[api] object InputFile {
  def fromJava(o: TdApi.InputFile): InputFile = o.getConstructor match {
    case TdApi.InputFileId.CONSTRUCTOR        => InputFileId.fromJava(o.asInstanceOf[TdApi.InputFileId])
    case TdApi.InputFileRemote.CONSTRUCTOR    => InputFileRemote.fromJava(o.asInstanceOf[TdApi.InputFileRemote])
    case TdApi.InputFileLocal.CONSTRUCTOR     => InputFileLocal.fromJava(o.asInstanceOf[TdApi.InputFileLocal])
    case TdApi.InputFileGenerated.CONSTRUCTOR => InputFileGenerated.fromJava(o.asInstanceOf[TdApi.InputFileGenerated])
  }
}
